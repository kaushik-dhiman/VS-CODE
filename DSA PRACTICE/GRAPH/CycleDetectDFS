

class Solution {
  public:
  
  
    bool isCycleDFS(int src,int parent, unordered_map<int, bool>& vis, vector<int> adj[])
    {
        vis[src] = true; 
            
            for(auto neighbour : adj[src])
            {
                if(!vis[neighbour])
                {
                    bool cycleDetected = isCycleDFS(neighbour, src, vis,adj);
                    if(cycleDetected) return true;
                }
                else if(neighbour != parent)
                {
                    return true;
                }
            }
            return false;
        } 
        
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        bool ans;
        unordered_map<int, bool> vis;
        
        for(int i = 0; i < V; i++)
        {
            if(!vis[i])
            {
                ans = isCycleDFS(i,-1, vis,adj);
                if(ans == true) return ans;
            }
        }
        return ans;
    }
};